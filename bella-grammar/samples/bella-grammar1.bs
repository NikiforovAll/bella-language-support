    //T = ProductCatalogIdFilter.Id.Test.Date(Test)
    //p.id.ToLower() == ProductCatalogIdFilter.id.Trim().ToLower()
    //PropositionFilteredCollection = PropositionCollection.Where(Test)
    //PropositionFilteredCollection = PropositionCollection.Where(p => Test)
    //Test.id == Test.Date()
    //test.T(d.Date())
    // test.T(p => Test.id(Test)) // but atm (need to consider precedence into account)
    //test.T(p => Test.id.Date()) // bug atm
    //test.T(Test.Test(0))
    // Test.id.id.Test()
    //PropositionCollection.Where(p => Test.id.id) // BUG atm
    //PropositionCollection.Where(p => Test.id == 3)
    // PropositionCollection.Where(p => 3 == 3)
    //PropositionCollection.Where(p => Test.id == Test.Trim())
    //PropositionCollection.Where(p => ProductCatalogIdFilter.id.ToLower())
    //PropositionFilteredCollection = PropositionCollection.Where(p => p.id.ToLower() == ProductCatalogIdFilter.id.Trim().ToLower())

// TestCollection.Where(i => i.Data.Date()) // bugged
// C:\Nikiforov\dev\nuts-bella\src\Domain\components\ApiGateway\ApiGatewaySrc\CrmPortalApi.bs

//formula TryGetDunningProcessToClose(DunningProcessesHistory, InvoiceId):DunningProcess =
//    With(DunningProcessesHistory.activeDunningProcesses
//            .FirstOrDefault(x => x.invoiceIds.Contains(InvoiceId), empty))

//InvoiceGeneratorAsync.RemoveSentToDunningInvoiceByInvoiceId()

// Test.Service()
// (new Test1).Service1()

    // let Account = new Params2(
    //     Test = R
    // )

// procedure Procedure()
//     TestService.

// procedure Procedure()
//     TestService.T1
// procedure Procedure()
//     TestService.T2()

// procedure Procedure()
//     Object.Forumula().T2()

// HelloWorld.ExampleMethod(T1, )
// call T(T1, )
// HelloWorld.ExampleMethod(new Account(firstName = 'Test'))

// procedure foo2()
//     TestService.T2()
// procedure foo2()
//     T1.T2.T3

// procedure foo3()
//     TestService.

// procedure foo2()
//     T1.T2.T3()

// new Account(gender = Account, t = account.)

// procedure foo2()
//     let t = new Account(Test = 1 )

// object Test: TestO[*]

// procedure Procedure(Params)
//     new T(
//         T = new T()
//     )

let t = TestService.Formula(TestObject.T)
