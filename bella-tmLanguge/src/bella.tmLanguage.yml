# [PackageDev] target_format: plist, ext: tmLanguage
---
name: Bella
scopeName: source.bs
fileTypes: [bs]

patterns:
- include: '#comment'
- include: '#declarations'

repository:

  declarations:
    patterns:
    - include: '#type-declarations'

  type-declarations:
    patterns:
    - include: '#service-host-declaration'
    - include: '#service-declaration'
    - include: '#procedure-declaration'
    - include: '#formula-declaration'
    - include: '#object-declaration'
    - include: '#setting-declaration'
    - include: '#enum-declaration'
    - include: '#comment'
    # - include: '#expression'


  service-host-declaration:
    begin: (?=\b(hosted|external)\b)
    end: (?=$)
    patterns:
    - begin: |-
        (?x)
        \b(hosted|external)\b\s+
        \b(service)\b\s+
        (@?[_[:alpha:]][_[:alnum:]]+)\s+
        \b(on)\b\s+
        (@?\[*[_[:alpha:]][_[:alnum:]]+\]*)\s*
      beginCaptures:
        '1': { name: storage.modifier.declaration.service.bella }
        '2': { name: keyword.other.class.service.bella }
        '3': { name: entity.name.type.service.bella }
        '4': { name: keyword.other.class.service.bella }
        '5': { name: variable.parameter.type.transport.service.bella }
      patterns:
      - include: '#procedure-signature-declaration'
      end: (?=$)

  service-declaration:
    name: "meta.function.service.bella"
    begin: \b(service)\b\s+([_[:alpha:]][_[:alnum:]]+)
    beginCaptures:
        '1': { name: keyword.other.class.service.bella }
        '2': { name: entity.name.type.service.bella }
    patterns:
    - include: '#procedure-signature-declaration'
    end: (^\s*$)

  object-declaration:
    name: meta.object.declaration.bella
    begin: (?=\b(object|persistent)\b)
    end: (^\s*$)
    patterns:
    - match: (persistent)\b\s+
      name: storage.modifier.declaration.service.bella
    - begin: \b(object)\b\s+([_[:alpha:]][_[:alnum:]]+)\s*(.*)
      beginCaptures:
        '1': { name: keyword.other.object.declaration.bella }
        '2': { name: entity.name.type.object.bella }
        '3':
          patterns:
            - include: '#return-type-declaration'
      # patterns:
      # - include: '#return-type-declaration'
      end: (?=$)
    - include: '#object-field-declaration'

  enum-declaration:
    name: meta.enum.declaration.bella
    begin: \b(enum)\b\s+
    beginCaptures:
        '1': { name: keyword.other.enum.declaration.bella }
        '2':
          patterns:
            - include: '#identifier'
    end: (^\s*$)
    patterns:
      - include: '#identifier'

  setting-declaration:
    name: meta.settings.declaration.bella
    begin: \b(setting)\b\s+([_[:alpha:]][_[:alnum:]]+)\b\s*(.+)
    beginCaptures:
        '1': { name: keyword.other.settings.declaration.bella }
        '2': { name: entity.name.class.object.bella }
        '3':
          patterns:
            - include: '#return-type-declaration'
            - include: '#expression'
    end: (?=$)

  object-field-declaration:
    name: meta.object.field.declaration
    match: ([_[:alpha:]][_[:alnum:]]+)\b\s*(.+)\s*
    captures:
      '1': { name: variable.parameter.object.bella }
      '2':
        patterns:
          - include: '#return-type-declaration'
          - include: '#expression'

  return-type-declaration:
      name: 'meta.common.declaration.return-type.bella'
      match: '(\:)\s*\b([_[:alpha:]][_[:alnum:]]+)\b(\S+)*\s*'
      captures:
        '1': { name: punctuation.separator.colon.return-type.bella }
        '2': { name: support.function.return-type.bella }
        '3':
          patterns:
            - include: '#collection-modifier'

  collection-modifier:
    name: meta.common.declaration.collection-modifier
    begin: (\[)([_[:alpha:]][_[:alnum:]]+|\*)
    beginCaptures:
      '1': { name: punctuation.parenthesis.close.bella }
      # '2': { name: keyword.control.other.placeholder }
      # '2': { name: variable.other.constant.placeholder }
      '2': { name: variable.language.accessor.placeholder }
    end: (\])
    endCaptures:
      '1': { name: punctuation.parenthesis.close.bella }
    # match: \[(\*|[_[:alpha:]][_[:alnum:]]+)\]
    # captures:
    #   '1': { name: punctuation.separator.colon.return-type.bella }

  procedure-declaration:
    name: "meta.function.procedure.declaration.bella"
    # begin: ^\s*\b(procedure)\b\s+(.*)
    begin: ^\s*\b(specific|generic|.*)\b(procedure)\b\s+(.+)
    beginCaptures:
        '1': { name: storage.modifier.declaration.generic-specific.bella }
        '2': { name: keyword.declaration.procedure.bella }
        '3':
          patterns:
            - include: '#procedure-signature-declaration'
    end: (?=^\S)
    patterns:
      - include: '#statement'

  formula-declaration:
    name: "meta.function.formula.declaration.bella"
    begin: ^\s*\b(specific|generic|.*)\b(formula)\b\s+(.+)
    beginCaptures:
        '1': { name: storage.modifier.declaration.generic-specific.bella }
        '2': { name: keyword.declaration.formula.bella }
        '3':
          patterns:
            - include: '#procedure-signature-declaration'
    end: (?=^\S)
    patterns:
      - include: '#statement'

  # TODO: ad separate declaration for invocation to support multi line
  procedure-signature-declaration:
    name: "meta.function.procedure.signature.declaration.bella"
    begin: \s*([_[:alpha:]][_[:alnum:]]+)
    beginCaptures:
        '1': {name: entity.name.function.bella}
    end: (?=$)
    patterns:
    - begin: \(
      beginCaptures:
        '0': { name: punctuation.parenthesis.open.bella }
      end: \)
      endCaptures:
        '0': { name: punctuation.parenthesis.close.bella }
      patterns:
        - include: '#procedure-params-declaration'
    - include: '#return-type-declaration'
    - match: '\b(oneway)\b'
      captures:
        '1': { name: keyword.declaration.return-type.bella }
    - include: '#expression'

  procedure-params-declaration:
    name: "meta.function.parameter.declaration.bella"
    patterns:
    - match: '\s+\b(out)\b\s+'
      captures:
          '1': { name: keyword.declaration.function.procedure.out.bella }
    - match: \s*\b([_[:alpha:]][_[:alnum:]]+)\b
      captures:
        '1': { name: variable.parameter.function.procedure.bella }
    - include: '#punctuation-comma'

  # operator-assignment:
  #   name: keyword.operator.assignment.bellla
  #   match: (?<!=|!)(=)(?!=)

  # variable-initializer:
  #   begin: (?<!=|!)(=)(?!=|>)
  #   beginCaptures:
  #     '1': { name: keyword.operator.assignment.bella }
  #   end: (?=[,\)\];}])
  #   patterns:
  #   - include: '#expression'

  comment:
    patterns:
    - name: comment.block.bella
      begin: /\*(\*)?
      beginCaptures:
        '0': { name: punctuation.definition.comment.bella }
      end: \*/
      endCaptures:
        '0': { name: punctuation.definition.comment.bella }
    - begin: (^\s+)?(?=//)
      beginCaptures:
        '1': { name: punctuation.whitespace.comment.leading.bella }
      end: (?=$)
      patterns:
      - name: comment.line.double-slash.bella
        begin: (?<!/)//(?:(?!/)|(?=//))
        beginCaptures:
          '0': { name: punctuation.definition.comment.bella }
        end: (?=$)

  expression:
    # name: meta.common.expression
    patterns:
    # - include: '#if-statement-ternary2'
    - include: '#if-statement-ternary3'
    - include: '#comment'
    # - include: '#merge-expression'
    - include: '#support-expression'
    # - include: '#throw-expression'
    # - include: '#this-expression'
    # - include: '#conditional-operator'
    - include: '#invocation-expression'
    - include: '#arrow-function-expression-body'
    - include: '#expression-operators'
    # - include: '#object-creation-expression'
    # - include: '#member-access-expression'
    # - include: '#element-access-expression'
    - include: '#literal'
    - include: '#parenthesized-expression'
    # - include: '#initializer-expression'
    # - include: '#identifier'
    # - include: '#identifier'


  statement:
    patterns:
    - include: '#comment'
    - include: '#foreach-statement'
    - include: '#if-statement'
    # - include: '#else-part'
    # - include: '#return-statement'
    - include: '#throw-statement'
    - include: '#local-declaration'
    # - include: '#block'
    - include: '#expression'
    # - include: '#punctuation-semicolon'

  local-declaration:
    patterns:
      - include: '#variable-declaration'
    # - include: '#local-constant-declaration'
    # - include: '#local-variable-declaration'

  # TODO: add chaining of collection modifiers
  #
  variable-declaration:
    name: "meta.variable.declaration.bella"
    begin: ^\s*(let|\s*)\s*\b([_[:alpha:]][_[:alnum:]]+)(\[.*|\s*)\s*(?:=)\s*(.+)
    beginCaptures:
        '1': { name: storage.modifier.declaration.generic-specific.bella }
        '2': { name: variable.parameter.variable.declaration.bella }
        '3':
          patterns:
            - include: '#collection-modifier'
        '4':
          patterns:
            - include: '#expression'
    end: (?=$)

  # member-access-expression:
  #   patterns:
  #     # An identifier with no type parameters and a dot to the left should
  #     # be treated as a property, so long as it isn't followed by a ( or [.
  #   - match: |-
  #       (?x)
  #       (\.)\s*                        # preceding dot
  #       (@?[_[:alpha:]][_[:alnum:]]*)\s* # property name
  #       (?![_[:alnum:]]|\(|(\?)?\[|<)  # next character is not alpha-numeric, nor a (, [, or <. Also, test for ?[
  #     captures:
  #       '1': { name: punctuation.accessor.bella }
  #       '2': { name: variable.other.object.property.bella }
  #     # An identifier with type parameters should be treated as an object,
  #     # regardless of whether there is a dot to the left.

  element-access-expression:
    begin: |-
      (?x)
      (?:(\.)\s*)                        # preceding dot?
      (?:(@?[_[:alpha:]][_[:alnum:]]*)\s*)? # property name
    beginCaptures:
      '1': { name: keyword.operator.null-conditional.apex }
      '2': { name: punctuation.accessor.apex }
      '3': { name: variable.other.object.property.apex }
      '4': { name: keyword.operator.null-conditional.apex }
    end: (?=\B)


  # local-variable-declaration:
  #   begin: |-
  #     (?x)
  #     (?:
  #       (?:(\blet)\s+)?| # ref local
  #       (?<type-name>
  #         (?:
  #           (?:blet\s+)?   # ref local
  #           (?:
  #             (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
  #             (?<name-and-type-args> # identifier + type arguments (if any)
  #               \g<identifier>\s*
  #               (?<type-args>\s*<(?:[^<>]|\g<type-args>)+>\s*)?
  #             )
  #             (?:\s*\.\s*\g<name-and-type-args>)*
  #           )
  #           (?:\s*\?\s*)? # nullable suffix?
  #           (?:\s*\[(?:\s*,\s*)*\]\s*)* # array suffix?
  #         )
  #       )
  #     )\s+
  #     (\g<identifier>)\s*
  #     (?=,|;|=|\))
  #   beginCaptures:
  #     '1': { name: storage.modifier.apex }
  #     '2': { name: keyword.other.var.apex }
  #     '3':
  #       patterns:
  #       - include: '#support-type'
  #       - include: '#type'
  #     # '4': ?<identifier> is a sub-expression. It's final value is not considered.
  #     # '5': ?<name-and-type-args> is a sub-expression. It's final value is not considered.
  #     # '6': ?<type-args> is a sub-expression. It's final value is not considered.
  #     '7': { name: entity.name.variable.local.apex }
  #   end: (?=;|\))
  #   patterns:
  #   - name: entity.name.variable.local.apex
  #     match: '@?[_[:alpha:]][_[:alnum:]]*'
  #   - include: '#punctuation-comma'
  #   - include: '#comment'
  #   - include: '#variable-initializer'

  # variable-initializer:
  #   begin: (?<!=|!)(=)(?!=|>)
  #   beginCaptures:
  #     '1': { name: keyword.operator.assignment.apex }
  #   end: (?=[,\)\];}])
  #   patterns:
  #   - include: '#expression'


  # type-name:
  #   patterns:
  #   - match: (@?[_[:alpha:]][_[:alnum:]]*)\s*(\.)
  #     captures:
  #       '1': { name: storage.type.apex }
  #       '2': { name: punctuation.accessor.apex }
  #   - match: (\.)\s*(@?[_[:alpha:]][_[:alnum:]]*)
  #     captures:
  #       '1': { name: punctuation.accessor.apex }
  #       '2': { name: storage.type.apex }
  #   - name: storage.type.apex
  #     match: '@?[_[:alpha:]][_[:alnum:]]*'

  # if-statement-ternary:
  #   name: meta.common.expression.ternary
  #   begin: \b(if)\b\s*
  #   beginCaptures:
  #     '1': { name: keyword.control.conditional-ternary.if.bella }
  #   end: \)
  #   patterns:
  #   - begin: \(
  #     beginCaptures:
  #       '0': { name: punctuation.parenthesis.open.bella }
  #     end: \)
  #     endCaptures:
  #       '0': { name: punctuation.parenthesis.close.bella }
  #     patterns:
  #     - include: '#expression'
  #   - include: '#statement'

  # if-statement-ternary2:
  #   name: meta.common.expression.ternary
  #   match: \b(if)\b\s*\((.*)\,(.*)\,(.*)\)
  #   captures:
  #     '1': {name: keyword.control.conditional-ternary.if.bella }
  #     '2':
  #       patterns:
  #         - include: '#expression'
  #     '3':
  #       patterns:
  #         - include: '#expression'
  #     '4':
  #       patterns:
  #         - include: '#expression'
  #   patterns:
  #   - include: '#statement'

  # TODO: bug with formula without generic-specific modifier: ternary if token is not highlighted
  if-statement-ternary3:
    name: meta.common.expression.ternary.multi-line.bella
    begin: |-
      (?x)
      (@?if)\s*
      (?=\(|\s*$)
    beginCaptures:
      '1': {name: keyword.control.conditional-ternary.if.bella }
    end: (?<=\))
    patterns:
    - include: '#expression'
    - include: '#punctuation-comma'
    # - include: '#statement'

  if-statement:
    name: meta.common.statement.if.bella
    begin: \s(if|else if|else)\s+(.*)(?=\s*$)
    beginCaptures:
      '1': { name: keyword.control.conditional.if.bella }
      '2':
        patterns:
          - include: '#expression'
    end: (?=$)

  foreach-statement:
    name: meta.common.statement.foreach.bella
    begin: \s*(foreach)(.+)(in)(.+)\s*(?=\s*$)
    beginCaptures:
      '1': {name: keyword.control.foreach.bella }
      '2': {name: variable.parameter.variable.declaration.bella }
      '3': {name: keyword.declaration.foreach.in.bella }
      '4':
        patterns:
          - include: "#expression"
    end: (?=$)

  throw-statement:
    name: meta.common.statement.throw.bella
    begin: \s*(error)(\[)(.+)(\])\s+(.+)\s*(?=\s*$)
    beginCaptures:
      '1': { name: keyword.control.error.bella }
      '2': { name: punctuation.parenthesis.open.bella }
      '3': { name: invalid.illegal.error-enum.bella }
      '4': { name: punctuation.parenthesis.close.bella }
      '5':
        patterns:
          - include: '#expression'
    end: (?=$)

  # This rule applies exclusively for namespace situations
  # i.e. System.debug(), Database.insert()
  support-expression:
    patterns:
    - include: '#support-type'
    - include: '#support-keywords'

  support-type:
    name: meta.support.bella
    patterns:
    # - include: '#comment'
    # - include: '#support-class'
    - include: '#support-functions'
    # - include: '#support-name'

  support-functions:
    match: \b(LogInfo|LogError|IsEmpty|With)\b
    captures:
      '1': { name: support.function.bella }

  support-keywords:
    patterns:
    - include: '#support-control-keywords'
    - include: '#support-declaration-keywords'

  support-control-keywords:
    match: \b(new|empty|return|not|in|let|call)\b
    captures:
      # '1': { name: keyword.declaration.support.bella }
      '1': { name: keyword.control.support.bella }

  support-declaration-keywords:
    match: \b(out|is|as)\b
    captures:
      '1': { name: keyword.declaration.support.bella }


  # TODO: add support for newline bracket
  # TODO: currently, formulas, built-in functions and calling components semantically the same
  invocation-expression:
    name: meta.common.expression.invocation
    begin: |-
      (?x)
      (@?\b\s*[_[:alpha:]][_[:alnum:]]+\.|\s*)
      (@?[_[:alpha:]][_[:alnum:]]+)\s*                 # method name
      (?=\()                                           # open paren of argument list
    beginCaptures:
      '1': { name: entity.name.class.type-invocation.bella }
      '2': { name: entity.name.function.bella }
    end: (?<=\))
    patterns:
    - include: '#argument-list'

  argument-list:
    begin: \(
    beginCaptures:
      '0': { name: punctuation.parenthesis.open.bella }
    end: \)
    endCaptures:
      '0': { name: punctuation.parenthesis.close.bella }
    patterns:
    # - include: '#named-argument'
    - include: '#expression'
    - include: '#punctuation-comma'

  parenthesized-expression:
    name: meta.common.expression.parenthesized-expression
    begin: \(
    beginCaptures:
      '0': { name: punctuation.parenthesis.open.bella }
    end: \)
    endCaptures:
      '0': { name: punctuation.parenthesis.close.bella }
    patterns:
    - include: '#expression'

  arrow-function-expression-body:
    name: meta.common.expression.arrow-func
    begin: =>
    beginCaptures:
      # '0': { name: storage.type.function.arrow.bella }
      '0': { name: keyword.declaration.function.arrow.bella }
    end: (?=\))
    patterns:
    - include: '#expression'


  expression-operators:
    patterns:
    - name: keyword.operator.collection.compound.bella
      match: --=|\+\+=
    - name: keyword.operator.assignment.compound.bella
      match: \*=|/=|%=|\+=|-=
    - name: keyword.operator.assignment.compound.bitwise.bella
      match: \&=|\^=|<<=|>>=|\|=
    - name: keyword.operator.bitwise.shift.bella
      match: <<|>>
    - name: keyword.operator.comparison.bella
      match: ==|!=
    - name: keyword.operator.relational.bella
      match: <=|>=|<|>
    - name: keyword.operator.logical.bella
      match: \!|&&|\|\|
    - name: keyword.operator.bitwise.bella
      match: \&|~|\^|\|
    - name: keyword.operator.assignment.bella
      match: \=
    - name: keyword.operator.decrement.bella
      match: --
    - name: keyword.operator.increment.bella
      match: \+\+
    - name: keyword.operator.arithmetic.bella
      match: '%|\*|/|-|\+'

  punctuation-comma:
    name: punctuation.separator.comma.bella
    match: ','

  literal:
    patterns:
    - include: '#boolean-literal'
    - include: '#null-literal'
    - include: '#numeric-literal'
    - include: '#string-literal'


  boolean-literal:
    patterns:
    - name: constant.language.boolean.true.bella
      match: (?<!\.)\btrue\b
    - name: constant.language.boolean.false.bella
      match: (?<!\.)\bfalse\b

  null-literal:
    name: constant.language.null.bella
    match: (?<!\.)\bnull\b

  numeric-literal:
    patterns:
    # match datetime utc constants: 2011-04-26T10:00:00-08:00
    - name: constant.numeric.datetime.bella
      match: \b(\d{4}\-\d{2}\-\d{2}T\d{2}\:\d{2}\:\d{2}(\-|\+)\d{2}\:\d{2})\b
    # match datetime with offset: 1999-01-01T23:01:01Z
    - name: constant.numeric.datetime.bella
      match: \b(\d{4}\-\d{2}\-\d{2}T\d{2}\:\d{2}\:\d{2}(Z)?)\b
    # match date: 1999-01-02
    - name: constant.numeric.date.bella
      match: \b(\d{4}\-\d{2}\-\d{2})\b
    # C# grammar: 0x hex-digits integer-type-suffix[opt] OR 0X hex-digits integer-type-suffix[opt]
    - name: constant.numeric.hex.bella
      match: \b0(x|X)[0-9a-fA-F_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\b
    # C# grammar: 0b binary-digits integer-type-suffix[opt] OR 0B binary-digits integer-type-suffix[opt]
    - name: constant.numeric.binary.bella
      match: \b0(b|B)[01_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\b
    # C# grammar: decimal-digits . decimal-digits exponent-part[opt] real-type-suffix[opt] OR . decimal-digits exponent-part[opt] real-type-suffix[opt]
    - name: constant.numeric.decimal.bella
      match: \b([0-9_]+)?\.[0-9_]+((e|E)[0-9]+)?(F|f|D|d|M|m)?\b
    #  C# grammar: decimal-digits exponent-part real-type-suffix[opt]
    - name: constant.numeric.decimal.bella
      match: \b[0-9_]+(e|E)[0-9_]+(F|f|D|d|M|m)?\b
    # C# grammar: decimal-digits real-type-suffix
    - name: constant.numeric.decimal.bella
      match: \b[0-9_]+(F|f|D|d|M|m)\b
    # C# grammar: decimal-digits integer-type-suffix[opt]
    - name: constant.numeric.decimal.bella
      match: \b[0-9_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\b


  string-literal:
    name: string.quoted.double.bella
    begin: "\""
    beginCaptures:
      '0': { name: punctuation.definition.string.begin.bella }
    end: (\")|((?:[^\\\n])$)
    endCaptures:
      '1': { name: punctuation.definition.string.end.bella }
      '2': { name: invalid.illegal.newline.bella }
    patterns:
    - include: '#string-character-escape'

  string-character-escape:
    name: constant.character.escape.bella
    match: \\.

  identifier:
    name: variable.other.readwrite.bella
    match: '@?[_[:alpha:]][_[:alnum:]]*'

# TODO:

# consider: separate declaration for function invocation
## multi line support
# consider: build-in features (functions) colored differently

# Info: https://github.com/stedolan/jq/wiki/Docs-for-Oniguruma-Regular-Expressions-(RE.txt)
