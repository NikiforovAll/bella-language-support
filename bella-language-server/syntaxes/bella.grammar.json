{
  "name": "Bella",
  "scopeName": "source.bs",
  "fileTypes": [
    "bs"
  ],
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#declarations"
    }
  ],
  "repository": {
    "declarations": {
      "patterns": [
        {
          "include": "#type-declarations"
        }
      ]
    },
    "type-declarations": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#service-host-declaration"
        },
        {
          "include": "#service-declaration"
        },
        {
          "include": "#procedure-declaration"
        },
        {
          "include": "#object-declaration"
        },
        {
          "include": "#setting-declaration"
        }
      ]
    },
    "service-host-declaration": {
      "begin": "(?=\\b(hosted|external)\\b)",
      "end": "(?=$)",
      "patterns": [
        {
          "begin": "(?x)\n\\b(hosted|external)\\b\\s+\n\\b(service)\\b\\s+\n(@?[_[:alpha:]][_[:alnum:]]+)\\s+\n\\b(on)\\b\\s+\n(@?\\[*[_[:alpha:]][_[:alnum:]]+\\]*)\\s*",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.declaration.service.bella"
            },
            "2": {
              "name": "keyword.other.class.service.bella"
            },
            "3": {
              "name": "entity.name.type.service.bella"
            },
            "4": {
              "name": "keyword.other.class.service.bella"
            },
            "5": {
              "name": "variable.parameter.type.transport.service.bella"
            }
          },
          "patterns": [
            {
              "include": "#procedure-signature-declaration"
            }
          ],
          "end": "(?=$)"
        }
      ]
    },
    "service-declaration": {
      "name": "meta.function.service.bella",
      "begin": "\\b(service)\\b\\s+([_[:alpha:]][_[:alnum:]]+)",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.class.service.bella"
        },
        "2": {
          "name": "entity.name.type.service.bella"
        }
      },
      "patterns": [
        {
          "include": "#procedure-signature-declaration"
        }
      ],
      "end": "(^\\s*$)"
    },
    "object-declaration": {
      "name": "meta.object.declaration.bella",
      "begin": "(?=\\b(object|persistent)\\b)",
      "end": "(^\\s*$)",
      "patterns": [
        {
          "match": "(persistent)\\b\\s+",
          "name": "storage.modifier.declaration.service.bella"
        },
        {
          "begin": "\\b(object)\\b\\s+([_[:alpha:]][_[:alnum:]]+)\\s*(.*)",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.object.declaration.bella"
            },
            "2": {
              "name": "entity.name.class.object.bella"
            },
            "3": {
              "patterns": [
                {
                  "include": "#return-type-declaration"
                }
              ]
            }
          },
          "end": "(?=$)"
        },
        {
          "include": "#object-field-declaration"
        }
      ]
    },
    "setting-declaration": {
      "name": "meta.settings.declaration.bella",
      "begin": "\\b(setting)\\b\\s+([_[:alpha:]][_[:alnum:]]+)\\b\\s*(.+)",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.settings.declaration.bella"
        },
        "2": {
          "name": "entity.name.class.object.bella"
        },
        "3": {
          "patterns": [
            {
              "include": "#return-type-declaration"
            },
            {
              "include": "#expression"
            }
          ]
        }
      },
      "end": "(?=$)"
    },
    "object-field-declaration": {
      "name": "meta.object.field.declaration",
      "match": "([_[:alpha:]][_[:alnum:]]+)\\b\\s*(.+)\\s*",
      "captures": {
        "1": {
          "name": "variable.parameter.object.bella"
        },
        "2": {
          "patterns": [
            {
              "include": "#return-type-declaration"
            },
            {
              "include": "#expression"
            }
          ]
        }
      }
    },
    "return-type-declaration": {
      "name": "meta.common.declaration.return-type.bella",
      "match": "(\\:)\\s*\\b([_[:alpha:]][_[:alnum:]]+)\\b(\\S+)*\\s*",
      "captures": {
        "1": {
          "name": "punctuation.separator.colon.return-type.bella"
        },
        "2": {
          "name": "support.function.return-type.bella"
        },
        "3": {
          "patterns": [
            {
              "include": "#collection-modifier"
            }
          ]
        }
      }
    },
    "collection-modifier": {
      "name": "meta.common.declaration.collection-modifier",
      "begin": "(\\[)([_[:alpha:]][_[:alnum:]]+|\\*)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.parenthesis.close.bella"
        },
        "2": {
          "name": "keyword.control.other.placeholder"
        }
      },
      "end": "(\\])",
      "endCaptures": {
        "1": {
          "name": "punctuation.parenthesis.close.bella"
        }
      }
    },
    "procedure-declaration": {
      "name": "meta.function.procedure.declaration.bella",
      "begin": "^\\s*\\b(procedure)\\b\\s+(.*)",
      "beginCaptures": {
        "1": {
          "name": "keyword.declaration.procedure.bella"
        },
        "2": {
          "patterns": [
            {
              "include": "#procedure-signature-declaration"
            }
          ]
        }
      },
      "end": "(?=$)"
    },
    "procedure-signature-declaration": {
      "name": "meta.function.procedure.signature.declaration.bella",
      "begin": "\\s*([_[:alpha:]][_[:alnum:]]+)",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.bella"
        }
      },
      "end": "(?=$)",
      "patterns": [
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.parenthesis.open.bella"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.parenthesis.close.bella"
            }
          },
          "patterns": [
            {
              "include": "#procedure-params-declaration"
            }
          ]
        },
        {
          "include": "#return-type-declaration"
        },
        {
          "match": "\\b(oneway)\\b",
          "captures": {
            "1": {
              "name": "keyword.declaration.return-type.bella"
            }
          }
        }
      ]
    },
    "procedure-params-declaration": {
      "name": "meta.function.parameter.declaration.bella",
      "patterns": [
        {
          "match": "\\s+\\b(out)\\b\\s+",
          "captures": {
            "1": {
              "name": "keyword.declaration.function.procedure.out.bella"
            }
          }
        },
        {
          "match": "\\s*\\b([_[:alpha:]][_[:alnum:]]+)\\b",
          "captures": {
            "1": {
              "name": "variable.parameter.function.procedure.bella"
            }
          }
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "name": "comment.block.bella",
          "begin": "/\\*(\\*)?",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.bella"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.bella"
            }
          }
        },
        {
          "begin": "(^\\s+)?(?=//)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.bella"
            }
          },
          "end": "(?=$)",
          "patterns": [
            {
              "name": "comment.line.double-slash.bella",
              "begin": "(?<!/)//(?:(?!/)|(?=//))",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.bella"
                }
              },
              "end": "(?=$)"
            }
          ]
        }
      ]
    },
    "expression": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#if-statement-ternary"
        },
        {
          "include": "#literal"
        }
      ]
    },
    "statement": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#if-statement-ternary"
        },
        {
          "include": "#else-part"
        }
      ]
    },
    "if-statement-ternary": {
      "begin": "(?<!\\.)\\b(if)\\b\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.conditional-ternary.if.bella"
        }
      },
      "end": "(?<=\\})|(?=;)",
      "patterns": [
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.parenthesis.open.bella"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.parenthesis.close.bella"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "include": "#statement"
        }
      ]
    },
    "if-statement": {
      "begin": "(?<!\\.)\\b(if)\\b\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.conditional.if.bella"
        }
      },
      "end": "(?=$)"
    },
    "else-part": {
      "begin": "(?<!\\.)\\b(else)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.conditional.else.bella"
        }
      },
      "end": "(?=$)",
      "patterns": [
        {
          "include": "#statement"
        }
      ]
    },
    "punctuation-comma": {
      "name": "punctuation.separator.comma.bella",
      "match": ","
    },
    "literal": {
      "patterns": [
        {
          "include": "#boolean-literal"
        },
        {
          "include": "#null-literal"
        },
        {
          "include": "#numeric-literal"
        },
        {
          "include": "#string-literal"
        }
      ]
    },
    "boolean-literal": {
      "patterns": [
        {
          "name": "constant.language.boolean.true.bella",
          "match": "(?<!\\.)\\btrue\\b"
        },
        {
          "name": "constant.language.boolean.false.bella",
          "match": "(?<!\\.)\\bfalse\\b"
        }
      ]
    },
    "null-literal": {
      "name": "constant.language.null.bella",
      "match": "(?<!\\.)\\bnull\\b"
    },
    "numeric-literal": {
      "patterns": [
        {
          "name": "constant.numeric.datetime.bella",
          "match": "\\b(\\d{4}\\-\\d{2}\\-\\d{2}T\\d{2}\\:\\d{2}\\:\\d{2}(\\-|\\+)\\d{2}\\:\\d{2})\\b"
        },
        {
          "name": "constant.numeric.datetime.bella",
          "match": "\\b(\\d{4}\\-\\d{2}\\-\\d{2}T\\d{2}\\:\\d{2}\\:\\d{2}(Z)?)\\b"
        },
        {
          "name": "constant.numeric.date.bella",
          "match": "\\b(\\d{4}\\-\\d{2}\\-\\d{2})\\b"
        },
        {
          "name": "constant.numeric.hex.bella",
          "match": "\\b0(x|X)[0-9a-fA-F_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\\b"
        },
        {
          "name": "constant.numeric.binary.bella",
          "match": "\\b0(b|B)[01_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\\b"
        },
        {
          "name": "constant.numeric.decimal.bella",
          "match": "\\b([0-9_]+)?\\.[0-9_]+((e|E)[0-9]+)?(F|f|D|d|M|m)?\\b"
        },
        {
          "name": "constant.numeric.decimal.bella",
          "match": "\\b[0-9_]+(e|E)[0-9_]+(F|f|D|d|M|m)?\\b"
        },
        {
          "name": "constant.numeric.decimal.bella",
          "match": "\\b[0-9_]+(F|f|D|d|M|m)\\b"
        },
        {
          "name": "constant.numeric.decimal.bella",
          "match": "\\b[0-9_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\\b"
        }
      ]
    },
    "string-literal": {
      "name": "string.quoted.double.bella",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.bella"
        }
      },
      "end": "(\\\")|((?:[^\\\\\\n])$)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.bella"
        },
        "2": {
          "name": "invalid.illegal.newline.bella"
        }
      },
      "patterns": [
        {
          "include": "#string-character-escape"
        }
      ]
    },
    "string-character-escape": {
      "name": "constant.character.escape.apex",
      "match": "\\\\."
    }
  }
}
