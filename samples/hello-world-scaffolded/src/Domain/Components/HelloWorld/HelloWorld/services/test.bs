
procedure CreatePartnerAccount(CreatePartnerAccountRequest, out AccountId)
    Email = CreatePartnerAccountRequest.contactInfo.email
    Name = CreatePartnerAccountRequest.firstName + " " + CreatePartnerAccountRequest.lastName
    AccountId = IdGenerator.GetNextAvailableId(TypeOfId.AccountId)
    CallDataRecord = SentToServiceCallsStorageCallDataRecordsMap[ServiceCallIdentificationResponse.callDataRecordId]
    call CreateServiceCallData(ServiceCallIdentificationResponse,CallDuration = CallDataRecord.callDuration, out ServiceCallData)
    PartnerAccount = CreatePartnerAccountRequest.FromDto(AccountId)
    Accounts[AccountId] = PartnerAccount
    PartnerAccounts[AccountId] = PartnerAccount
    PartnerAccountsBySalesOfficeId[CreatePartnerAccountRequest.salesOfficeId] = PartnerAccount
    AccountIdsByEmail[Email] ++= AccountId
    Login = Email


procedure CreateServiceCallData(Test, out Test)
    Test = "1"
    call Test(out Test)
    test.T(p => Test.id(Test).id)
    AccountId = 'Test'

procedure CreatePartnerAccount(out AccountId)
    Email = CreatePartnerAccountRequest.contactInfo.email
    Name = CreatePartnerAccountRequest.firstName + " " + CreatePartnerAccountRequest.lastName
    PartnerAccount = CreatePartnerAccountRequest.FromDto(AccountId)
    Accounts[AccountId] = PartnerAccount
    PartnerAccounts[AccountId] = PartnerAccount
    PartnerAccountsBySalesOfficeId[CreatePartnerAccountRequest.salesOfficeId] = PartnerAccount
    foreach ServiceCallIdentificationResponses
    foreach DestinationNumber in DestinationNumbers
    Login = Email


procedure SendServiceCallIdentificationResponse(ServiceCallIdentificationResponses)

    CallDataRecordCollection = new

    foreach SentToServiceCallsStorageCallDataRecordsMap.Where(cdr => cdr.regionCode is not empty)

        CallDataRecordCollection ++= CallDataRecord

    foreach ServiceCallIdentificationResponses

        CallDataRecord = SentToServiceCallsStorageCallDataRecordsMap[ServiceCallIdentificationResponse.callDataRecordId]
        call CreateServiceCallData(ServiceCallIdentificationResponse,CallDuration = CallDataRecord.callDuration,out ServiceCallData)
        call CreateServiceCallData(
            ServiceCallIdentificationResponse,
            CallDuration = CallDataRecord.callDuration,
            out ServiceCallData
        )
        CallDataRecord.serviceCallData = ServiceCallData

    foreach CallDataRecordCollection
        SentToServiceCallsStorageCallDataRecordsMap --= CallDataRecord.id

    CallDataRecordBillingRequests = CallDataRecordCollection.Select(x => x.ToBillingRequest(x.serviceAccountId))

   BillingEngineAsync.BillCallDataRecords(CallDataRecordBillingRequests)

