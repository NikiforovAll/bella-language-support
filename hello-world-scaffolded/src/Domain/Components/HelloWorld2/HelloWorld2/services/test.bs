
// object Test:CustomType

// object Test2: CustomType2

// //CobsDslOrder
// //ApiGateway

// //ApiGatewayDtos

// //Fulfillment

object SubscribedBundlesPerProduct
    internetBundles:AvailableBundles
    tvBundles:AvailableBundles
    voipBundles:AvailableBundles

procedure CrmPortalGetSubscribedAvailableBundlesPerProductForStartTvOrder(OrderId, out SubscribedBundlesPerProduct)
    SubscribedBundlesPerProduct = new
    AdjustingOrder = Fulfillment.GetAdjustingOrderById(OrderId)

    if !(AdjustingOrder is StartTvOrder)
        error[OrderNotFound] "Start Tv Order with ID " + OrderId + " not found"

    StartTvOrder = AdjustingOrder as StartTvOrder
    CreateSubscriptionRequestCollection = StartTvOrder.productList

    call GetSubscribedAvailableBundlesPerProduct(OrderId, CreateSubscriptionRequestCollection, out SubscribedBundlesPerProduct)


procedure GetSubscribedAvailableBundlesPerProduct(OrderId, CreateSubscriptionRequestCollection, out SubscribedBundlesPerProduct)
    SubscribedBundlesPerProduct = new
    AvailableProposition = Fulfillment.GetAvailablePropositonByOrderId(OrderId)

    if AvailableProposition is not empty
        AvailableProducts = AvailableProposition.products

        foreach CreateSubscriptionRequest in CreateSubscriptionRequestCollection
            SubscribeBundleWithDiscountRequests = CreateSubscriptionRequest.subscribeBundleWithDiscountRequests
            if AvailableProducts is empty
                error[EmptyArgument] "No available products connected with available proposition"
            AvailableProduct = AvailableProducts.First(x => x.id == CreateSubscriptionRequest.productId)
            BundleIds = SubscribeBundleWithDiscountRequests.Select(x => x.bundleId)
            let Bundles = AvailableProduct.bundles.Where(x => BundleIds.Contains(x.id))
            ProductId = CreateSubscriptionRequest.productId
            Product = ProductCatalog.GetProductById(ProductId)
            PricePlanId = Product.pricePlan.id

            foreach AvailableBundle in Bundles
                DiscountId = SubscribeBundleWithDiscountRequests.First(x => x.bundleId == AvailableBundle.id).discountId // unneeded ?
                BundleId = AvailableBundle.id
                if !IsEmpty(DiscountId)
                    Discount = ProductCatalog.GetDiscountById(PricePlanId, BundleId)

                    Amount = Discount.GetDiscountedAmount(AvailableBundle.price)

                    AvailableBundle.additionalInfos ++= new AdditionalInfo(name = "discountedPrice", value = Amount + "")
                    AvailableBundle.discountId = Discount.id

            if AvailableProduct.typeOfServiceId == InternetTypeOfServiceId
                SubscribedBundlesPerProduct.internetBundles = Bundles
            else if AvailableProduct.typeOfServiceId == TvTypeOfServiceId
                SubscribedBundlesPerProduct.tvBundles = Bundles
            else if AvailableProduct.typeOfServiceId == VoipTypeOfServiceId
                SubscribedBundlesPerProduct.voipBundles = Bundles
