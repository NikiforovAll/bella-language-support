service HelloWorld
    ExampleMethod()

service GeneralLedger
    SaveGlEvent(GlEvent, SourceCreationDate) oneway
    SaveGlAccount(GlAccount) oneway
    RevertGlEvent(Date, GlEventType, SourceId) oneway
    GetGlEvent(Date, GlEventType, SourceId): GlEvent[*]
    GetRevertedGlEvents(Date, GlEventType, SourceId):GlEvents
    GelAllAccounts():GlAccounts


procedure SaveGlAccount(GlAccount)
    if BankTransaction.currentMatchInfo.details.Where(d => d is ServiceAccountBankTransactionMatchDetail).Any(d => (d as ServiceAccountBankTransactionMatchDetail).invoiceId == MtpTransactionMatchDetail.invoiceId)

procedure GetCustomerAccountListByIdList(AccountIds, out AccountList)
    AccountList = new
    foreach AccountId in AccountIds
        call GetUserAccountById(AccountId, out Account)
        AccountList ++= Account

procedure ProccessMailAssignmentRequest(GlAccount, MailAssignmentRequest)
    MailAssignmentResultDetailsCollection = MailAssignmentRequest.mailAssignmentRequestDetailsCollection
        .Where(x => AccountIdsByEmail.ContainsKey(x.senderEmail) && !(AccountIdsByEmail[x.senderEmail].Count > 1))
        .Select
            (
                x =>
                    new MailAssignmentResultDetails
                        (
                            accountId = AccountIdsByEmail[x.senderEmail].First(),
                            mailId = x.mailId
                        )
            )

    MailIds = MailAssignmentRequest.mailAssignmentRequestDetailsCollection
        .Where(x => !MailAssignmentResultDetailsCollection.Any(y => y.mailId == x.mailId))
        .Select(mailId)

    MailAssignmentResult = new MailAssignmentResult
        (
            mailAssignmentResultDetailsCollection = MailAssignmentResultDetailsCollection,
            unassignedMailIds = MailIds
        )

    MailStorageAsync.ProcessMailAssignmentResult(MailAssignmentResult)

formula ToCreateServiceAccountRequest(Order, Proposition):CreateServiceAccountRequest = new CreateServiceAccountRequest(
    shippingAddress = Order.shippingAddress.ToCreateAddressRequest(),
    startOn = Order.startOn,
    endOn = Order.endOn,
    propositionId = Order.propositionId,
    serviceCategoryId = Order.serviceCategoryId,
    paymentMethod = Order.paymentMethod,
    initialInvoicePaymentMethod = Order.initialInvoicePaymentMethod,
    email = Order.customer.contactInfo.email,
    subscribedCashback = if (Order.isEnergieCustomer, Proposition.cashback, empty))


procedure CreateMyNleAccount(CreateCustomerAccountRequest, out AccountId)
    AccountId = IdGenerator.GetNextAvailableId(TypeOfId.AccountId)
    call CreateCustomerAccountInternal(AccountId, CreateCustomerAccountRequest)

procedure CreateCustomerAccountInternal(AccountId, CreateCustomerAccountRequest)
    Email = CreateCustomerAccountRequest.contactInfo.email
    Name = CreateCustomerAccountRequest.firstName + " " + CreateCustomerAccountRequest.lastName

    CustomerAccount = CreateCustomerAccountRequest.FromDto(AccountId)
    CustomerAccounts[AccountId] = CustomerAccount
    Accounts[AccountId] = CustomerAccount
    AccountIdsByEmail[Email] ++= AccountId


procedure UpdateCustomerAccount(UpdateCustomerAccountRequest)
    if IsEmpty(UpdateCustomerAccountRequest.accountId)
        error[InvalidAccountId] "Customer account id cannot be empty"
    call GetCustomerAccountById(AccountId = UpdateCustomerAccountRequest.accountId, out CustomerAccount)
    if UpdateCustomerAccountRequest.createdBy is empty
        error[InvalidCreatedBy] "Created by cannot be empty"
